/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations} from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import THREE from 'three'

const modelFilePath = '/models/iphone.glb'

export function IphoneModel({ ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF(modelFilePath)

  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20
    group.current.rotation.x = Math.cos(t / 4) / 8
    group.current.rotation.y = Math.sin(t / 4) / 8
    group.current.position.y = (1 + Math.sin(t / 1.5)) / 10
  })

  const { actions } = useAnimations(animations, group)
  const [hovered, set] = useState()
  const extras = { receiveShadow: true, castShadow: true, "material-envMapIntensity": 0.2 }
  useEffect(() => void (actions["CameraAction.005"].play().paused = true), [actions])
  useEffect(() => {
    if (hovered) group.current.getObjectByName(hovered).material.color.set("white")
    document.body.style.cursor = hovered ? "pointer" : "auto"
  }, [hovered])
  useFrame((state) => {
    actions["CameraAction.005"].time = THREE.MathUtils.lerp(actions["CameraAction.005"].time, actions["CameraAction.005"].getClip().duration * scroll.current, 0.05)
    group.current.children[0].children.forEach((child, index) => {
      child.material.color.lerp(color.set(hovered === child.name ? "tomato" : "#202020").convertSRGBToLinear(), hovered ? 0.1 : 0.05)
      const et = state.clock.elapsedTime
      child.position.y = Math.sin((et + index * 2000) / 2) * 1
      child.rotation.x = Math.sin((et + index * 2000) / 3) / 10
      child.rotation.y = Math.cos((et + index * 2000) / 2) / 10
      child.rotation.z = Math.sin((et + index * 2000) / 3) / 10
    })
  })


  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Cube.geometry} material={materials.back} />
      <mesh geometry={nodes.Cube_1.geometry} material={materials.antenna} />
      <mesh geometry={nodes.Cube_2.geometry} material={materials.body_metall} />
      <mesh geometry={nodes.Cube_3.geometry} material={materials.back_glass} />
      <mesh geometry={nodes.Cube_4.geometry} material={materials.screen} />
      <mesh geometry={nodes.Cube_5.geometry} material={materials.black_frame} />
      <mesh geometry={nodes.Cube_6.geometry} material={materials.chrom} />
      <mesh geometry={nodes.Cube_7.geometry} material={materials.camera_body} />
      <mesh geometry={nodes.Bolt.geometry} material={materials.chrom} position={[-0.01, -0.07, 0]} rotation={[0, 0, Math.PI]} />
      <group position={[-0.012, 0.052, 0.0057]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Cylinder.geometry} material={materials.chrom} />
        <mesh geometry={nodes.Cylinder_1.geometry} material={materials.chrome_frame} />
        <mesh geometry={nodes.Cylinder_2.geometry} material={materials.glass_cam} />
        <mesh geometry={nodes.Cylinder_3.geometry} material={materials.camera_body} />
        <mesh geometry={nodes.Cylinder_4.geometry} material={materials.lenses} />
        <mesh geometry={nodes.Cylinder_5.geometry} material={materials.flash} />
        <mesh geometry={nodes.Cylinder_6.geometry} material={materials.back} />
        <mesh geometry={nodes.Cylinder_7.geometry} material={materials.black_frame} />
      </group>
      <mesh geometry={nodes.grill_bottom.geometry} material={materials.chrom} position={[-0.02, -0.07, 0]} />
      <mesh geometry={nodes.logo.geometry} material={materials.logo} position={[0, 0, 0.0057]} rotation={[-Math.PI / 2, 0, Math.PI]} />
      <mesh geometry={nodes.grill.geometry} material={materials.black_frame} position={[0, 0.07, 0]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.grill_body.geometry} material={materials.black_frame} />
      <mesh geometry={nodes.screen.geometry} material={materials.front_glass} />
    </group>
  )
}

useGLTF.preload(modelFilePath)
